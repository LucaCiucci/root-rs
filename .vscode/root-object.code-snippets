{
	// Place your adapter workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Root object header": {
		"scope": "c,cpp",
		"prefix": "root-obj-header",
		"body": [
			"RRS_CLASS($1);",
			"//RRS_CLASS_PARENT($1, SOME_PARENT);",
			"",
			"#ifdef ROOT_RS_INCLUDE_INCLUDES",
			"#include <$1.h>",
			"#endif",
			"",
			"#ifdef ROOT_RS_INCLUDE_FUNCTIONS",
			"//void RSS_METHOD($1, some_method)(some_args);",
			"#endif",
		]
	},
	//"Root object conversion": {
	//	"scope": "c,cpp",
	//	"prefix": "root-obj-conversion",
	//	"body": [
	//		"RRS_STRUCT $3* root_rs_$1__as_$3(RRS_STRUCT $1* RRS_VALUE $2);",
	//		"RRS_STRUCT $1* root_rs_$1__from_$3(RRS_STRUCT $3* RRS_VALUE $4);$0",
	//	]
	//}
	"Root object implementation file": {
		"scope": "c,cpp",
		"prefix": "root-obj-impl",
		"body": [
			"#include <root-rs-c-bindings.h>",
			"",
			"#define ROOT_RS_INCLUDE_INCLUDES",
			"#include <root-rs-c-bindings/$1.h>",
			"#undef ROOT_RS_INCLUDE_INCLUDES",
			"",
			"extern \"C\" {$0",
			"}",
		]
	}
}